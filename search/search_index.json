{"config":{"lang":["en"],"separator":"[\\s\\-,;!?]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Foodhub Architecture documentation. This site provides architecture diagrams, design notes, and implementation details for Foodhub\u2019s various systems and services. Explore the pages to understand system flows, integrations, and infrastructure.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>This documentation site is built using MkDocs and the Material theme.</p>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/","title":"Details","text":"<p>This Architecture documents the Continuous Integration and Continuous Deployment (CI/CD) process for the Foodhub Web platform.</p>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#1-overview","title":"1. Overview","text":"<p>The pipeline automates the release process for both UI and API applications. It integrates JIRA for release management, AWS services for build and deployment, and self-hosted tools for orchestration.</p>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#2-workflow-details","title":"2. Workflow Details","text":""},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#21-development-pull-requests","title":"2.1 Development &amp; Pull Requests","text":"<ul> <li>Developers (UI / API) create a Pull Request in:</li> <li><code>/uktech/customer_app_2.0</code> (UI)</li> <li><code>/uktech/t2s-api</code> (API)</li> <li>PRs require two code owner approvals before merge.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#22-release-tagging-approvals","title":"2.2 Release Tagging &amp; Approvals","text":"<ul> <li>After merging:</li> <li>A Release Tag is created in the repository.</li> <li>Developers raise Release Tickets in JIRA.</li> <li>L1 &amp; L2 approvals in JIRA are required before moving forward.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#23-build-stage","title":"2.3 Build Stage","text":""},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#ui-project","title":"UI Project","text":"<ul> <li>AWS CodeBuild is triggered via webhook.</li> <li>CodeBuild:</li> <li>Pulls the tagged source code.</li> <li>Builds the application.</li> <li>Pushes artifacts.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#api-project","title":"API Project","text":"<ul> <li>Self-Hosted Build Jenkins pulls the tag.</li> <li>Jenkins builds and packages the API code.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#24-artifact-management","title":"2.4 Artifact Management","text":"<ul> <li>UI Build Artifacts:</li> <li>Uploaded to an S3 bucket.</li> <li>S3 acts as the origin for CloudFront.</li> <li>CloudFront is invalidated to serve the latest version.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#25-orchestration","title":"2.5 Orchestration","text":"<ul> <li>Autobot Jenkins manages deployment orchestration after JIRA approvals.</li> <li>Jenkins pushes tags to Self-hosted Octopus.</li> <li>Octopus triggers CodeDeploy.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#26-deployment","title":"2.6 Deployment","text":"<ul> <li>AWS CodeDeploy deploys the latest build to EC2 instances:</li> <li>Residing inside a private subnet.</li> <li>Using rolling/in-place strategies.</li> </ul>"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#3-key-components","title":"3. Key Components","text":"Component Purpose JIRA Release ticketing &amp; approvals (L1 &amp; L2) GitHub Repositories Source code for UI and API CodeBuild Builds UI artifacts S3 Bucket Stores UI build artifacts CloudFront Delivers static content globally Jenkins (Autobot) Coordinates releases after approval Jenkins (Build) Builds API from tags Octopus Deploy Orchestrates deployments CodeDeploy Deploys code to EC2 servers EC2 (Private subnet) Hosts the deployed applications"},{"location":"categories/CI%5CCD-pipeline/foodhub_web/#4-high-level-flow","title":"4. High-Level Flow","text":"<pre><code>- Developer \u2192 PR \u2192 Approvals \u2192 Release Tag \u2192 JIRA Tickets \u2192 Approvals  \n- [UI: CodeBuild \u2192 S3 \u2192 CloudFront]  \n- [API: Jenkins Build]  \n- Autobot Jenkins \u2192 Octopus Deploy \u2192 CodeDeploy \u2192 EC2\n</code></pre>"},{"location":"categories/applications/foodhub_web/","title":"Details","text":"<p>This Architecture document explains the end-to-end flow of the Foodhub Web Architecture as illustrated in the architecture diagram.</p>"},{"location":"categories/applications/foodhub_web/#1-overview","title":"1. Overview","text":"<p>The system is designed to serve Foodhub\u2019s web and API traffic securely, efficiently, and at scale. It leverages Cloudflare for global DNS, security, and traffic management, while AWS handles content delivery, application hosting, and data persistence.</p>"},{"location":"categories/applications/foodhub_web/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"categories/applications/foodhub_web/#2-request-flow","title":"2. Request Flow","text":""},{"location":"categories/applications/foodhub_web/#21-client-cloudflare-layer","title":"2.1 Client &amp; Cloudflare Layer","text":"<ol> <li>A client (web browser) resolves <code>abc.com</code>.</li> <li>DNS resolution is handled by Cloudflare DNS.</li> <li>The request passes through Cloudflare Edge, where:</li> <li>TLS/SSL termination occurs.</li> <li>Web traffic is inspected by Cloudflare WAF and Bot Control.</li> <li>Cloudflare Load Balancer selects a healthy pool from Cloudflare Pools and forwards the request.</li> </ol>"},{"location":"categories/applications/foodhub_web/#22-aws-content-delivery-network","title":"2.2 AWS \u2013 Content Delivery Network","text":"<ol> <li>Cloudflare forwards the HTTP request to Amazon CloudFront.</li> <li>AWS WAF filters the request at the CDN edge.</li> <li>CloudFront routes the request based on behaviours:</li> <li>Default behaviour \u2192 handles static content.</li> <li><code>/api</code> behaviour \u2192 forwards to backend APIs.</li> <li>Cached objects are served directly when available.</li> </ol>"},{"location":"categories/applications/foodhub_web/#23-static-content-delivery","title":"2.3 Static Content Delivery","text":"<ul> <li>Static assets (HTML, CSS, JS, images) are stored in AWS S3 (UI Block).</li> <li>An Origin Request Lambda fetches content from S3 when not cached.</li> </ul>"},{"location":"categories/applications/foodhub_web/#24-api-backend","title":"2.4 API Backend","text":"<ol> <li>API calls are routed to AWS WAF for additional protection.</li> <li>The traffic reaches an Application Load Balancer (ALB) on ports 80/443.</li> <li>ALB forwards requests to EC2 instances in private subnets.</li> <li>Application servers interact with:</li> <li>ElastiCache (Redis) for caching.</li> <li>Amazon RDS Aurora (MySQL) for database operations.</li> </ol>"},{"location":"categories/applications/foodhub_web/#25-networking-components","title":"2.5 Networking Components","text":"<ul> <li>The backend is hosted inside a VPC in <code>eu-west-1</code> across AZs <code>eu-west-1a</code>, <code>1b</code>, and <code>1c</code>.</li> <li>Private subnets host:</li> <li>EC2 application servers.</li> <li>Redis.</li> <li>RDS Aurora.</li> <li>Public subnets contain:</li> <li>NAT Gateway (internet egress for private resources).</li> <li>Bastion host (SSH access to private EC2s).</li> <li>An Internet Gateway (IGW) provides external connectivity.</li> </ul>"},{"location":"categories/applications/foodhub_web/#3-security-layers","title":"3. Security Layers","text":"<ul> <li>Cloudflare WAF &amp; Bot Control block malicious traffic at the edge.</li> <li>AWS WAF secures CloudFront and the ALB.</li> <li>Private subnets isolate application components.</li> <li>Bastion host + security groups manage admin access.</li> </ul>"},{"location":"categories/applications/foodhub_web/#4-key-aws-services","title":"4. Key AWS Services","text":"Service Purpose CloudFront CDN for caching and delivering content AWS WAF Web application firewall at CDN &amp; ALB Lambda (Origin) Handles origin requests for S3 content S3 Static site hosting (UI Block) ALB Routes API traffic to EC2 targets EC2 Application hosting ElastiCache (Redis) Session/cache management RDS Aurora (MySQL) Relational database NAT Gateway Outbound internet for private resources Bastion Host Secure SSH into private instances"},{"location":"categories/applications/foodhub_web/#5-high-level-flow","title":"5. High-Level Flow","text":"<pre><code>Browser \u2192 Cloudflare DNS \u2192 Cloudflare Edge (WAF/Bot Control) \u2192 Cloudflare LB \u2192 CloudFront (WAF, Cache)\n\u2192 [Static: Lambda \u2192 S3] OR [API: WAF \u2192 ALB \u2192 EC2 \u2192 Redis/RDS]\n</code></pre>"}]}